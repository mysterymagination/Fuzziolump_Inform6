! todo: add shape change mechanic, which will show us how to make Inform 6 recognize a new action e.g. verb 'change' followed by noun 'shape', or maybe a simpler one-off custom verb shapechange which only ever applies to the player.
! todo: consider magic ring mechanic?  I like the friendly NPC element that adds.

Constant DEBUG;

! story title - this is presumably metadata given what comes next...
! What we're going for here is a Fable in Five, basically a bite-sized IF 
! adventure with approximately 5 locations, 1 minor quest, 1 non-trivial puzzle/riddle thing,
! and something like 1 inventory object puzzle per location.
Constant Story "Thief";

! story headline that will be user-facing
Constant Headline
              "^Thief - Version 1^
                By Jeff Creswell (2019)^";

! high score
Constant MAX_SCORE 255;

! current build revision
Release 1;

! this works, but we don't need it atm.  The trick to getting entry point fns to work was implementing them above the boilerplate includes
! [GamePreRoutine;
!    print "in GamePreRoutine";
! ];

! Parser and VerbLib form the foundation of the Inform parser and are required
Include "Parser";
Include "VerbLib";

! custom attributes
! legible means something can be read with the read action
Attribute legible;
! index for iterating lists, since Inform 6 is weird about local vars for no reason
Global index = 0;
! placeholder var for manually examining tokens in user input
Global currentWord;
! switch indicating that the player has discovered the truth of the Cult of the Lost and the Lost Lords imprisoned within The Tomb of Forgotten Gods hidden behind and beneath the Treasury in Mt. Godspeak
Global truth_known = false;
! custom actions
   !
   ! Added function ReadSub so that the property 'before' can use it. The default,
   ! if there is no 'before read', is to examine the object.
   !
   [ ReadSub; <<Examine noun>>; ];
   
   ! Added function HitSub so that the property 'before' can use it. The default,
   ! if there is no 'before hit', is to attack the object.
   !
   [ HitSub; <<Attack noun>>; ];
   
   ! Added function PunchSub so that the property 'before' can use it. The default,
   ! if there is no 'before punch', is to hit the object.
   !
   [ PunchSub; <<Hit noun>>; ];

   ! Added function UseSub so that the property 'before' can use it. The default,
   ! if there is no 'before use', is to print that there's no way to use that.
   !
   [ UseSub; "There's no obvious way to use ", (the)noun, " on ", (the)second, "."; ]; ! no docs on what, if anything, gets set when a verb is parsed and its sub is called.  Obviously noun is known within the afaics undocumented <<OtherVerb noun>> syntax, but for no reason it is not available to a print command within the sub?  Or maybe I'm dereferencing it using the correct random f***ing cast?! UPDATE: it was the wrong f***ing cast.  Evidently (the) or (name) to get the string name of an object were what I needed.

! Grammar will provide the standard Inform grammar plus extensions
Include "Grammar";

   !
   ! We also have to extend the read grammar to call ReadSub
   ! by default.
   !
   ! We're using the 'Extend' statment because the word "read" is already defined
   ! in the grammar file included above. This adds our usage.
   !
   ! The 'first' tag is used to indicate to Inform that this usage of the word
   ! "read" should be the first one checked. Without 'first', the "read" word
   ! will not work the way we want it to because the default usage will get
   ! called and will not handle our code properly.
   !
   ! 'legible' is the attribute we created and by placing it here, we're telling
   ! Inform that this attribute must be present in the object to call this usage
   ! of the word "read".
   !
   Extend "read" first * legible                       -> Read;

   ! define use verb as supporting 'use X on Y'
   Verb "use" * noun 'on' noun -> Use;

! main fn
[ Initialise;
  ! player starts in the Grandiossuary atrium of the Treasury, with the SkullLetter
  location = Vault;!Grandiossuary;
  move SkullLetter to player;
  move CoinPurse to player;
  ! start NPC daemons
  StartDaemon(Falknir);
  StartDaemon(Skjordun);
  StartDaemon(Brunhilde);
  StartDaemon(Fritzwig);
];

! Define starting inventory
Object CoinPurse "Leather coin purse"
   with name 'purse' 'pouch' 'wallet' 'coin purse' 'leather coin purse',
        description "You've always loved the smell of tough old leather, especially when it mingles with that of gold; reminds you that hard work (ideally someone else's) pays off.",
   has container openable;
   
! todo: how can I put N instances of an object, say the Coin, into a container?  Would the player be able to then name a number of them to take an action with, and/or be able to specify one or all at once?   
Object -> Coin "A shiny gold coin"
   with name 'coin' 'gold',
        description "This ancient gold coin is a collector's item.  Well, it's a very good counterfeit of a collector's item -- due to a printing misadventure embarked upon by a drunken ex-employee of the Royal Mint, the Cavernous Crown, which is emblazoned on all dwarven currency, is pictured here with seven gemstones across its band rather than the auspicious eight.  Only a few hundred of these were minted before production was halted and the offending worker flensed living.  Since they mock the correct configuration of the crown, the superstitious and scrupulous dwarven people call this set the Cursed Coins.";
        
Object SkullLetter "Skullduggerous Letter"
   with name 'letter' 'skullduggerous letter' 'instructions',
        description "This yellowed parchment contains a coded message from your informants, explaining your mission and the plan hatched between ye maestros of mischief.",
        before [; read: 
        print "^~The swan sings upon the lowest branch, her eggs balanced perfectly.  The wayfaring priest, meanwhile, must make his pilgrimmage down the southwestern slopes of purgatory before descending to hell itself; there only shall he learn the meaning of light by confronting the puzzle of true darkness.~^This nonsense is meant to read like the ravings of a demented priest, or perhaps a fragment of a strange novel.  It's not a code so much as a mneumonic to remind you that your informants, a group of crooked contractors who recently replaced plumbing in the Treasury's undercarriage, bored a hole up into the vault in the exact center of the cellar ceiling.  It's been disguised expertly, and they assure you none would find it without knowing its position.  Stealing much from the Treasury would be impossible with all its safeguards -- a heist like this calls for a surgical strike, and that's what you're for!  The job is to lift ~Nnamni's My God: The Paradox~ from a set of precious 1st edition books inside the Vault, then get out.  The book is worth about three-quarters of the gold and gems the dwarves likely have hoarded away on its own anyway, so there's no need to shovel loot into a conspicuous container.  The ~plumbers~ furnished you with a forgery of the book to replace it, so with any luck no one will miss it for a few days and you can all make good your flight out of town.  Further, the Treasury's receptionist Brunhilde, who greets everyone as they enter and serves as a rather impossible to miss or mistake face of the Treasury, is their woman on the inside -- she's privy to the plan and fully cut-in to the profits, so she'll try to help.  Finally, the bizarre philosophical drivel about a monk traveling to hell means that the best covert way into the cellar is through the air ducts; the safest and most hidden of these can be found in the Southwest corner of the Atrium.^"; 
        rtrue;],
   has legible;

Object FoodTable "Smorgasbord"
   with name 'table' 'smorgasbord' 'snacks' 'treats',
        description "A table boasting a marvelous spread of delectible yummies has been laid out in front of Brunhilde's desk.  A sign near the center reads ~Welcome new clients!  Your precious treasures are ours here, and we'll keep them safe like our own kin.  Safer!  You know what happened to the last person who tried to steal from us?  Nor does anyone else.  Help yourself to a treat!~",
        found_in Grandiossuary,
   has edible static supporter;

Object -> TastyCake "Tasty Cake"
   with name 'food' 'tasty cake' 'tasty' 'snack' 'snacks' 'cake' 'cakes' 'treat' 'treats',
        description "Surely it is scrumptious, but you are not here to glut yourself.",
        score_value 10,
   has edible scored;

! The following function is called by Inform when the player types SCORE or when
! the player ends the game. As you can see, each range of points has a different
! string printed. You can modify this function to suit your own story. Remember,
! the constant MAX_SCORE contains the value that is used by Inform to represent
! "You have scored <score> out of <MAX_SCORE>", so you want both the Constant
! and this function to be synchronized.
![ PrintRank; ! todo: doesn't work for some reason?
!  print ", earning you the rank of ";
!  if (score >= 100) "the greatest.";
!  if (score >= 80) "above average.";
!  if (score >= 60) "average.";
!  if (score >= 40) "below average.";
!  if (score >= 20) "the barely living.";
!  "the living dead.";
  ! todo: what a weird conditional branch structure... I guess print opens a stream
  ! of some sort and then can optionally take in more input, but how does
  ! it know to not take in the default 'the living dead.' string after 
  ! selecting one of the others?  This presumably works as a switch
  ! statement with specific case handling and then a default case, but it
  ! reads like it would bleed through into the default regardless.
!];

! Define locations
   !
   ! Object Name: Grandiossuary
   ! Short Description: "A lavish atrium, flush with thorned roses."
   ! Initial Description: none
   ! Normal Description: "You are standing before a dazzling array of glittering oppulence.  
   ! Rows upon rows of bespectacled dwarves labor over ledgers amidst a cacophony
   ! of quill scratches, all ignoring you studiously.  Several burly guards, each wielding
   ! twin battleaxes with blades twice the width of your shoulderspan, watch you 
   ! carefully.  A gorgeous female receptionist beams at you, her incandescence making
   ! you sweat from across the room."
   ! Attributes: light
   !
   ! The Grandiossuary is the oppulent to 11 atrium of the Dwarven Royal Treasury,
   ! and hosts a multitude of dwarves whose smiles are all teeth.
   !
   Object Grandiossuary "A lavish atrium, flush with thorned roses"
       with description
             "You are standing before a dazzling array of glittering oppulence.  Rows upon rows of bespectacled dwarves labor over ledgers amidst a cacophony of quill scratches, all ignoring you studiously.  Several burly guards, each wielding twin battleaxes with blades twice the width of your shoulderspan, watch you carefully.  A gorgeous female receptionist beams at you, her incandescence making you sweat from across the room.^The mighty Vault looms imposingly directly North, with the Treasury Archive off to the Northwest and the humble Warden's chamber tucked away beyond the Northeast corner of the room.  Back South is Market Street, figuratively paved with gold.  Best not leave yet, though, unless you're abandoning the mission; your clients are likely watching.",
             !guards 'TGuard1' 'TGuard2', !array creation
             ! intercept entry to Grandiossuary with a command to start Falknir's daemon activity
             ! after [; go: print "we have entered the Grandiossuary"; StartDaemon(Falknir); rfalse;], ! not the right hook? UPDATE NewRoom() would likely be the entry point fn to override
             nw_to Archive,
             ne_to WardenChamber,
             n_to Vault_Door,
             d_to AirDuct,
             s_to MarketStreet,
       has light;
    
    Object MarketStreet "Market Street"
      with before [;
                     go:
                        ! handle endings where player flees
                        if(OmniNomicron in player) {
                           ! the player is doomed to a life on the run, using the mighty omninomicron simply to survive
                           ! since they have the nomicron, we know they have uncovered the truth so no need to hold back!
                           print "^Having fled the haunted Treasury with the world's mightiest weapon in your pack, your days dissolve into a blur of paranoia and violence.  Cultists of the Lost Lords find you wherever you hide, crossing nations and oceans and the sky itself to silence you.  At first it was an easy thing to transform your pursuers into candy and trail rations and sweet water to both escape their clutches and fuel your flight, but the transmutation magic is taking its toll on you.  Things don't look as they once did: every tree is a possible fudgeicle, every person a new flavor of jerky, and the whole world is tilting rather... sideways.  After more than afew 'accidental' assaults upon random passersby who startled you, the mundane law enforcement of the world has unwittingly joined their eldritch counterparts in the hunt.  You'll keep fighting and running for as long as you draw breath, but... hey, when did you sprout tasty sausages from your hands and feet?^";
                        } else {
                           ! the player is hunted down by the cult
                           if(truth_known) {
                              print "^Though you have successfully fled the nightmares within Mt. Godspeak's Tomb of Forgotten Gods, you cannot outrun their minions -- in a matter of days they find you, capture you, and prepare you to be a sacrifice to their lauded Lost.^";
                              
                           } else {
                              print "^This is all too much for any take -- you flee the Treasury and its oddments, and put the shady folk who hired you out of your mind.  Late the next night, some unexpected visitors appear on your doorstep.  Brunhilde the beautiful receptionist leads them, though she looks a bit less appealing in a hooded black robe spattered with blood.  Before you can fight or fly, they are upon you with ropes and chains.  They blindfold you and drag you over rough pavement for some time.^";
                             
                           }
                           print "^When your blindfold is finally removed, you behold the last sight you'll ever see: an array of leering hook-tentacled statues ringed around an altar over which you are stretched, and Brunhilde holding a curved dagger over your heart.  She wears nothing but a giddy grin, and your last thought is that even through a filter of murderous madness she is still so beautiful.  As your blood drains away into massive necrotic batteries, so too does your memory disappear into obscurity.^";
                        }
                        deadflag = 1;
                        rtrue;
                  ];
    
    !Attribute distracted; ! seems attributes have to be set statically at compile time and are read-only thereafter?
    
    ! a person is a sapient creature with, for the purposes of this tale, an array of interest strings and a mapping of characters to affinity integer values.
    ! The affinity values represent how much this person likes the named character, and is a mostly nonsense ordinal. 
    Class Person
       class Object
       with interests, affinities,
       has animate;
  
    Class Dwarf
       class Person
       with description "The stocky race of dwarves are famed for their ingenuity, tenacity, and a certain fondness for unnecessarily heavy weaponry.  Lesser known is their natural resistance to magical effects, which is born of their ties to earth.",
            gender "unknown",
            distractionStatus false,
            height 4, !feet
            weight 150; !pounds
            
    Class TreasuryGuard
       class Dwarf
       with description "This imposing guard wears a serious expression, and watches you like a hawk.",
            name "guard" "treasury guard" "vault guard",
            isWatching [;
               ! a treasury guard is watching if they are not distracted and are present in the Grandiossuary
               if (~~(self.distractionStatus && self in Grandiossuary)) {
                  rtrue;
               } else {
                  rfalse;
               }
            ],
            weapon "battleaxe",
            interests,
            found_in Grandiossuary;
            
    Object AirDuct "Loose air duct"
       with description "This air duct leads down into the cellar, according to your contacts.  It's relatively out of the way, hard to see, and close to the entrance so you can make good your escape with whatever spoils you can claim.",
            name 'duct' 'airduct',
            door_to Cellar,
            door_dir d_to,
            before [; Open, Close, Go:
                         if(Fritzwig.distractionStatus && Falknir.distractionStatus && Skjordun.distractionStatus) {
                            rfalse; ! because we want the library to process normal Go behavior
                         } else {
                            print "^You can't just slip into an air duct with all these eyes on!  A distraction, or several, are in order.^";
                            !print "fritzwig distracted: ", Fritzwig.distractionStatus,"Skjordun distracted: ", Skjordun.distractionStatus, "falknir distracted: ", Falknir.distractionStatus;
                            rtrue;
                         }
                   ],
            found_in Grandiossuary,
       has static door openable;
            
    Object FritzwigDesk "Desk of Fritzwig"
       with description "This old mahagony desk has been polished and cared for meticulously.  A few worn spots on the blotter from frequent and frenzied figuring are all that mar its pristine surface.",
             found_in Grandiossuary,
       has static supporter;
    
    Object -> FritzwigInbox "Fritzwig's inbox"
       with name 'box' 'inbox' 'Fritwig inbox' 'Fritzwig^s inbox' 'mail' 'mailbox',
            description "If the fullness of an inbox is an indicator of responsibility then Fritzwig must be the most important person in the multiverse.  Though he works furiously to combat the pile, every few minutes someone passes by and drops off a few more action items.  The tower of headaches stretches significantly above the lip of the flimsy plastic box, and even a disturbance as benign as a stray breeze sends it into a precarious lean that makes Fritzwig hyperventilate.  You begin to suspect his colleagues that jog swiftly past his desk, while fanning themselves, may have some sort of malicious intent.",
            before [; 
                      Take: "Like a striking serpent, Fritzwig's hand flashes out and slaps yours away from his precious work. ~Kindly leave that alone, please.  It is sorted VERY particularly.~"; 
                      Push, Hit, Punch:
                         print "^*CRASH* With barely a touch you send the stack of papers scattering to the floor, and a few to the winds.  Fritzwig makes a sort of whining shriek like a wounded animal that cannot comprehend its own pain, and dives upon the mess.  A passing accountant chuckles and whispers, ~Good one, mate!  He'll be fiddling with that rot for days.~^";
                         Fritzwig.distractionStatus = true;
                         rtrue;
                        ! okay, so when you enter 'use X on Y', X's use handler is called and Y will be stored symbolically in second.
                     !  Use: 
                     !    print "You have used ", (the)noun;
                     !    if(noun=='Fritzwig') {
                     !       print "used inbox on noun fritz";
                     !       rtrue;
                     !    } else if(second=='Fritzwig') {
                     !       print "used inbox on second fritz";
                     !       rtrue;
                     !    }

                     !    if(noun==Fritzwig) {
                     !       print "used inbox on symbolic noun fritz";
                     !       rtrue;
                     !    } else if(second==Fritzwig) {
                     !       print "used inbox on symbolic second fritz";
                     !       rtrue;
                     !    }
                   ];
       
    
    ! Fritzwig is the accountant whose desk happens to be nearest the air duct
    ! player will have to distract him and the guards (the receptionist is on board with the robbery) to enter the air duct
    Dwarf Fritzwig "Fritzwig" 
       with name 'Fritzwig' 'accountant',
            description "This spindly accountant pours over ledgers like an overwrought machine, zipping through papers and somehow leaving more notes than there was source material.  Sweat dripping from his brow, he pauses for a moment to glance at Brunhilde, his perma-furrowed brow relaxing when and only when he takes in her visage.  With a whisper of a sigh, he then returns to his figures.  You didn't need to spy on Mr. Fritzwig to learn his weakness, though of course you did anyway: there's actually a little shrine to her in his flat, filled with discarded utensils and other garbage-y tidbits that had once come into contact with her -- it's creepy.",
            life [; 
                    if(self.distractionStatus) {
                       if(Brunhilde.flirt_with == 'Fritzwig') {
                          ! handle love-flustered fritzwig
                          print "^Just as Fritzwig seems to have decided he should murder you to be on the safe side of competition, Brunhilde waves to him and favors him with a smile whose luminance could strike onlookers blind as surely as it leaves them dumb.  Forgetting both you and the rest of the world besides Brunhilde, Fritzwig tries to smile back at her (managing a lopsided leer).^";
                       } else {
                          ! handle paper pushing Fritzwig
                          print "^~Whatever your damnable problem is, I CANNOT help -- I'm TERRIBLY busy with this-this-this fffooo...rrrglerumble~ He trails off as his fury overwhelms his capacity for language.^";
                       }
                       rtrue;
                    }
                    Answer:
                       if(noun == 'Brunhilde') {
                          print "^Fritzwig looks up at you irritably, then starts as the name you've just invoked registers.  ~What was that? Has she said something?  Is she looking this way?!~  His eyes roll wildly, like those of a frenzied horse.  Then, abruptly, they settle on you with a fearsome intensity.  ~How do you even know her, anyway?  You're not one of us.~^";
                          if(Brunhilde.flirt_with == 'Fritzwig') {
                            print "^Just as Fritzwig seems to have decided he should murder you to be on the safe side of competition, Brunhilde waves to him and favors him with a smile whose luminance could strike onlookers blind as surely as it leaves them dumb.  Forgetting both you and the rest of the world besides Brunhilde, Fritzwig tries to smile back at her (managing a lopsided leer).^";
                            self.distractionStatus = true;
                           } else if(Brunhilde.flirt_with == Skjordun) {
                              print "^Just as Fritzwig seems to have decided he should murder you to be on the safe side of competition, he notices Brunhilde mooning over Skjordun.  His eyes begin to twitch erratically, and his fingernails gouge divots in his blotter as his hands unconciously (?) practice wrapping around a throat.^";
                           }
                           
                           rtrue;
                        }
                      default: "Without looking up from his work, Fritzwig drones, ~I'm VERY busy at the moment.  Please find someone else to harass.~";
                   ],
            daemon [;
                       if(player in Grandiossuary) {
                          if(self.distractionStatus) {
                             if(Brunhilde.flirt_with == 'Fritzwig') {
                                print "Fritzwig stares dumbly at Brunhilde as she smiles and winks at him.  He looks vaguely terrified, like a dog who has finally caught a car and now has to do something with it.^";
                             } else {
                                print "The sound of crumpling papers and muffled curses drift up from where Fritzwig is vainly trying to reconstruct his shattered world on the floor beside his desk.^";
                             }
                          } else {
                          switch (random(10)) {
                        1: "Fritzwig leaps gleefully onto his chair with a cry of ~Eureka!~  The silent and withering gaze of his colleagues brings him back down, figuratively and literally, as he sheepishly explains, ~Well, that account had been all collie-wobbles for decades.  Can't blame a chap for a smidge of celebration.~";
                        3: "Without turning his head from his work, Fritzwig grabs another paper from his inbox.  ~Tsk tsk, oh dear, oh dear...~  He mutters as the numbers are ALL WRONG.";
                        5: "Fritzwig sits back in his chair and stares openly at Brunhilde.  She nods at him nervously and turns her gaze elsewhere, but he remains motionless and vigilant as a stalking statue.";
                        7: "Several dwarves gather for a spot of tea, joking and jostling one another.  Fritzwig eagerly joins them, but the moment he arrives they suddenly remember an urgent meeting.  Far away.  Invites only.  Fritzwig slumps back to his desk and stares at Brunhilde for awhile.";
                          }
                         } ! if not distracted
                       }
                   ],
            weight 100,
            interests 'numbers' 'ledgers' 'Brunhilde',
            found_in Grandiossuary,
       has proper male;
    
    ! Skjordun can be distracted by offerings of food or attention from the pretty receptionist
    TreasuryGuard Skjordun "Skjordun" 
       with name "Skjordun",
            description "Having surveilled Skjordun at his local tavern haunts over the past few weeks, you know that he is a glutton; anything savory will command his attention.  You've also noticed that he spends most of his time studying the back of Brunhilde the receptionist, and trying to pretend he isn't.",
            ! wtf: for some idiot reason, all arrays are byte arrays and any string is stored in 2 bytes somehow?  I have no idea how you're meant to reconstruct string from a string array during iteration in this case, but to hell with it -- this language suuuuuuucks
!           handleSkjordunInterests_Answer [interestIndex answeredNoun;
!       for(interestIndex = 0: interestIndex < self.#interests: interestIndex= interestIndex + 2) {
!       print "interest index ", interestIndex, " of ", self.#interests/2, " which is ", self.&interests-->interestIndex;
!                          if(answeredNoun == self.&interests-->interestIndex) {
!                             print "~I have great interest in ", noun, "!~";
!                             switch(answeredNoun) {
!                                'food':
!                                   "Skjordun's nose twitches and his stony gaze locks onto you.  ~Someone said food?  May I have some?~"; ! todo: handle food disctraction iff player hands it over
!                                'Brunhilde':
!                                   "The mighty guard's eyes widen and his rapt attention washes over you. ~Did she something about me?!~  He flushes deeply and a goofy grin spreads across his face as wild imaginings dance behind his eyes.";
                                   
!                             }
!                          }
!                       }
!    ],
            daemon  [; 
                       if(player in Grandiossuary) {
                          if(self.distractionStatus) {
                             if(Brunhilde.flirt_with == 'Skjordun') {
                                print "Flushed red as a lobster, Skjordun does his best to return Brunhilde's implied affection with blinky winks and wavering waves.^";
                             } else {
                                print "Crumbs fairly fly every direction as Skjordun devours the offering you've left with him.^";
                             }
                          } else {
                          switch (random(5)) {
                             1: "Skjordun's stomach growls, filling the atrium with a sound like a tiger whose burning brightness will no longer be ignored.";
                             2: "With a sigh like a deflating bellows, Skjordun casts a quick glance at Brunhilde and then immediately begins studying his feet.";
                          }
                        } ! if not distracted
                       }
                    ],
            life [; 
                    if(self.distractionStatus) {
                       if(Brunhilde.flirt_with == 'Skjordun') {
                          print "^Just as Skjordun's daydreams ignite a sparkle behind his eyes, Brunhilde turns around in her desk, stretching luxuriously.  As she comes out of her preening, she meets his gaze smooth as you please and winks.  After an exchange of shy waves and a virginal blush only a professional actress could manage, the dreamy spark in Skjordun's eyes has turned to a conflagration and totally consumed his ability to pay attention to anything but her.^";
                       } else {
                          print "^Skjordun pays you no mind, for the tasty cake has eclipsed the world to him.  It is his world, now.^";
                       }
                       rtrue;
                    }
                    Answer:
                       switch(noun) {
                                'food':
                                   "Skjordun's nose twitches and his stony gaze locks onto you.  ~Someone said food?  May I have some?~"; 
                                'Brunhilde':
                                   print "^The mighty guard's eyes widen and his rapt attention washes over you. ~Did she something about me?!  Oh, she's the best and there's just no words suitable to describe her beauty -- magicute is the best I can come up with.~  He flushes deeply and a goofy grin spreads across his face as wild imaginings dance behind his eyes.^";
                                   !print "brunhilde is flirting with ", (address) Brunhilde.flirt_with;
                                   if(Brunhilde.flirt_with == 'Skjordun') {
                                      print "^Just as Skjordun's daydreams ignite a sparkle behind his eyes, Brunhilde turns around in her desk, stretching luxuriously.  As she comes out of her preening, she meets his gaze smooth as you please and winks.  After an exchange of shy waves and a virginal blush only a professional actress could manage, the dreamy spark in Skjordun's eyes has turned to a conflagration and totally consumed his ability to pay attention to anything but her.^";
                                      self.distractionStatus = true;
                                   }
                                   rtrue;
                
                             }
                       
                       Show, Give:
                          switch(noun) {
                             ! another oddment: since the noun in this case is an Object, you have to use that same Object (our man Food) in the switch case to get triggered by it instead of using a string literal representation as normal.
                             TastyCake: 
                                print "Skjordun greedily snatches the offered food, and begins to chow down.  He is a man obsessed, and all the rest of the world fades from his notice.^";
                                move TastyCake to Skjordun;
                                self.distractionStatus = true;
                                rtrue;
                          }
                          !print "Skjordun distraction status is ", self. distractionStatus;
                    default: "^The stoic warrior stares straight ahead, ever vigilant save for the glances he steals at Brunhilde once a minute or so.";
                 ],
            height 5,
            weight 250,
            interests 'food' 'Brunhilde',
       has proper male;
       
    ! Falknir is greedy, and can only be distracted with monetary compensation
    TreasuryGuard Falknir "Falknir"
       with name "Falknir",
            description "^Falknir is a grumpy old fellow, whose only loyalty is to money.  The royal treasury trusts him because they are confident none can beat their pay; they're not wrong.  Several of the street urchins you hired to probe his susceptibility to bribes met with great success while extracting privileged information about The Ancient Society of Scrooge, a secret organization by and for penny-pinchers who read the first chapter of the Dickens work, declared it the greatest work of all time, and then never finished it.",
            interests 'wealth',
            money_counts 0,
            life [; 
                    if(Brunhilde.flirt_with == 'Falknir') {
                       print "Falknir arches a curious eyebrow at Brunhilde's enthusiastic come-hithering, but seems otherwise uninterested.^"; 
                    }
                    Show, Give:
                       switch(noun) {
                          Coin:
                             print "^Falknir's eyes light up at the sight of such a rare treasure as one of the infamous Cursed Coins.  ~Let me see that!~  he fairly howls, barely restraining himself from snatching it out of your hand.  You flip it to him, and hold a finger before your lips for an instant in a discreet hushing gesture.  He nods knowingly and begins studiously drooling over his new acquisition.^";
                             move Coin to Falknir;
                             self.distractionStatus = true;
                             rtrue;
                       }
                    default: "The surly old dwarf points toward Brunhilde and says, ~Please direct all inquiries to our receptionist.  I'm sure you'll find her very friendly.  Not so, me.~";
                       
                 ],
            daemon  [; 
                       if(player in Grandiossuary) {
                          if(self.distractionStatus) {
                        
                            print "Falknir taps the side of his nose and leers at you, somehow indicating camaraderie.^";
                             
                          } else {
                          switch (random(10)) {
                        1: "Falknir shifts his weight, grumping softly about creaking joints.";
                        3: "With a huff, Falknir blows out his glorious curled mustache and glares at you suspiciously.";
                        5: "Falknir ostentatiously jingles the coins in his many pouches, baring his gray teeth in a greasy grin.";
                        7: "Taking his eyes off you for a moment, Falknir busily counts out all the gold in his main money pouch (complete with a dollar sign in gold leaf) for the ",++self.money_counts,"th time.";
                          }
                         } ! if not distracted
                       }
               ],
       has proper male;
       
    Dwarf Brunhilde "Brunhilde"
       with name "Brunhilde",
            description "The glowing receptionist's name is Brunhilde, and she is far wilier than she lets on.  Her professional persona is one of polite innocence and an infinitely earnest desire to help.  Having trailed her during off-hours, you've come to doubt that this veneer is genuine: most nights she treks down to a very shady shrine deep in the city's underworks, the sort of place not even a masterful creature of the shadows such as yourself would dare enter.  Often she brings a man or occasionally a woman with her, a different one each time.  One she was leading a black ram and had a black rooster under her arm.  She always returns to the surface alone.",
            life [ n consultWords consultToken is_flirting flirt_object; 
            
                     ! any clause flirt detection
                     wn = consult_from; ! the magic var wn is the <any clause> token position in the input string where NextWord() will start from 
                     consultWords = consult_words; ! the number of understood <any clause> tokens
                     is_flirting = false;
                     flirt_object = 'placeholder';
                     while(consultWords) {
                        ! the current word from user input that does not fit in the life structure table
                        consultToken = NextWord();
                        consultWords--;
                        !print "Examining consult token [", (address)consultToken,"], of ", consultWords," tokens";
                        !print "understood noun is [", (address)noun, "] and second is [", (address)second,"]";
                        switch(consultToken) {
                           'distract', 'flirt', 'catch', 'seduce', 'charm':
                              is_flirting = true;
                           'Skjordun', 'Fritzwig', 'Falknir':
                              flirt_object = consultToken;
                        }
                     } ! end whileing over the consult tokens
                     if(is_flirting) {
                           if(flirt_object ~= 'placeholder') {
                              self.flirt_with = consultToken;
                              print "^The predatory and proprietary smile of a tigress baring her teeth before prey transforms Brunhilde's face for a flash as she turns to ", (address)flirt_object,".  ~Ready and...~ her voice darkens and sharpens, becoming husky and hot enough to burn, ~...willing.  Eager.  Needy.  Urgently!  I'll wrap him up so tightly in puppet strings he'd blissfully watch you cart away the whole mountain!~^";
                              switch(self.flirt_with) {
                                 'Skjordun':
                                    Skjordun.distractionStatus = true;
                                 'Fritzwig':
                                    Fritzwig.distractionStatus = true;
                              } 
                           rtrue;
                           } else {
                              ! this logic handles the case that player tries to 2-step this situation, first saying/telling/asking her to flirt, and then telling her who to flirt with in a new input
                              print "Brunhilde smiles slyly.  ~You want me to flirt with someone?  Who?~^";
                              self.waiting_to_flirt = true;
                              rtrue;
                           }
                    }
                        
                     Answer: 
                        switch(noun) {
                           'Skjordun', 'Fritzwig', 'Falknir':
                              if(self.waiting_to_flirt) {
                                 !print "answering in flirt mode about ", (address)noun;
                                 print "^The predatory and proprietary smile of a tigress' smile baring her teeth before prey transforms Brunhilde's face for a flash as she turns to ", (address)noun,".  ~Ready and...~ her voice darkens and sharpens, becoming husky and hot enough to burn, ~...willing.  Eager.  Needy.  Urgently!  Point them at me and I'll wrap them up so tightly in puppet strings they'd blissfully watch you cart away the whole mountain!~^";
                                 rtrue;
                              } else {
                                 !print "answering out of flirt mode about ", (address)noun;
                                 print "^Brunhilde arches a brow and asks, ~What about him?~  Her pupils dilate and she continues, ~You wanna distraction?  I can't leave me desk, but I can draw eyes at range... tell me who to flirt with!~^";
                                 rtrue;
                              }
                              
                           'hello', 'hi', 'hey', 'howdy', 'heya', 'hiya':
                               "~Why hello there, you gorgeous person you!  Welcome to the fabulous and most ancient Royal Treasury of the Dwarves!~  She stands and waves her hands about, framing the elaborate vault at the far side of the room flourish-y-ly.  In a hushed voice, she whispers, ~They gave me your description, so I know you're here to pull the job.  I'm here to help!~  She winks at you, and despite being a consummate professional you feel your knees go weak for an instant.";
                            'job', 'heist', 'thief', 'steal':
                            "She glances about and then winks at you conspiratorially.  ~I'm here to help -- tell me to do something and I'll give it a go, so long as it doesn't look suspicious.  I need to stick here at my desk; maybe I could catch someone's eye for you?~  She bats her lashes and bares her teeth in a cruel grin.";
                            default:
                               "Brunhilde adopts a look of cherubic innocence.  ~Pardon?  I'm afraid I don't follow you.~";
                        }
                     Ask: 
                        ! todo: a better way to handle custom actions like Flirt that require an object e.g. the "with Fritzwig" in "tell Brunhilde to flirt with Fritzwig" would be to create a custom verb.  Since this is a short one-off, I'm going to cut corners like I did for I7 and just grep for keywords and inference from there regardless of language structure. 
                        switch(second) {
                           !'distract', 'flirt', 'catch', 'seduce', 'charm':  ! you have to <ask ... about ...>, you can't <ask ... to ...> for some reason.  The order rule kind of handles this, but who's going to guess you have to say <order Brundhilde to flirt...>?  Seems kinda aggressive.
                            !  "~Who should I ", second, "?~" ;
                             ! self.waiting_to_flirt = true;
                             'job', 'heist', 'thief', 'steal':
                            "She glances about and then winks at you conspiratorially.  ~I'm here to help -- tell me to do something and I'll give it a go, so long as it doesn't look suspicious.  I need to stick here at my desk; maybe I could catch someone's eye for you?~  She bats her lashes and bares her teeth in a cruel grin.";
                            
                           default: "Batting her lashes at you, she simpers, ~Do go on about ", (the)second, "!~";
                        }
                     NotUnderstood: "She furrows her brow ostentatiously before saying, ~I'm afraid I don't know anything about that.~"; 
                     !Ask: "the first 21st 22nd and 23rd chars of buffer says [", (char)buffer->21, (char)buffer->22, (char)buffer->23, "]"; ! woo, this kinda works for intercepting raw user input!
                     Tell: 
                        "~I'm afraid I'm too busy to deal with ", second," just now.~";
                        
                     default: "Brunhilde smiles politely and tidies her desk."; 
                  ],
            daemon [;
                    if(player in Grandiossuary) {
                       if(self.flirt_with ~= 'placeholder') {
                          ! this suggests that Brunhilde flirting with the mark is enough to distract him, which is (was) not currently the case... but it probably should be.  The weird 'say brunhilde to skjordun' situation we have going on now is unintuitive, unnecessary, and uninteresting.
                          print "^Brunhilde glows in the general direction of ", (address)self.flirt_with,", drawing his eyes like a planet's magnetism draws a compass needle, but with a much greater compulsive pull than any mere celestial body could muster.^";
                       } else {
                          switch (random(10)) {
                        1, 2: "Brunhilde stretches ostentatiously, preening herself.  A silence as staggering as a struck gong fills the atrium as dozens of quills cease their otherwise omnipresent scratching as one, if only for a moment.";
                        3, 4, 7, 8: "Clearing her throat demurely, Brunhilde flashes you a tiny smirk deep with conspiracy.";
                        9: "Humming tunelessly, Brunhilde opens a book.  The cover is a sultry romance novel, but your keen eyes spot the places where she glued this facade on over the true face of her pocket dimension.  Peering over her shoulder, you recognize the accounts of one Dr. Herbert Wolfsworth, a famously sadistic demonologist and conjurer.";
                        10: "A buzzing insect lands on Brunhilde's nose, and she doesn't twitch a muscle.  Even as it begins to suck her blood, she remains still as a stone.  With glacial patience, she stealthily moves a pair of quills up to her nose and then snatches the pest up between them, striking like a surgical serpent.  Gently as you please and wearing a small, deeply satisfied smile, she maneuvers the creature behind a stack of papers, shielding it from easy sight, and then begins slowly ripping off its many limbs.  Her eyes sparkle and her breath catches in a soft gasp, its toe just over the threshold of audibility, whenever a limb pops free.";
                        5, 6: "With the practiced languid carelessness of a mistress loof, Brunhilde brushes out her hair.  For an hour.  You hear a longing sigh from somewhere, quickly stifled into a fairly obvious fit of coughing.";
                        
                          }
                         } ! if not flirting
                       }
                   ],
            ! the player can get her to flirt with someone to potentially distract them
            flirt_with 'placeholder',
            waiting_to_flirt false,
            interests 'cosmic horror' 'arcana' 'sweets',
            found_in Grandiossuary,
        has proper female;
    
    ! The Cellar: D from the Grandiossuary is the Treasury's undercarriage, wherein vital automation that no one wants to see dutifully chugs along... until it doesn't
    Object Cellar "Undercarriage of the Treasury"
       with description
          "It's damp down here, and musty.  Most people don't like dank dark places, but you've always felt at home there.  The air duct you came down through sits innocently high above you on the North wall, but still within reach despite cursed gravity.  A row of Climatrol brand heating and cooling pillars lines the West wall, magical flame currently keeping the winter chill at bay.  Brilliant copper pipes criss-cross the other walls like an orgy of serpents, complete with occasional writhing when someone flushes a toilet or turns on a sink.  The Treasury really should have hired actual plumbers; thieves and grifters know much, but not how to set up functional plumbing.  The ceiling, your singular point of interest, is bare stone and looks untouched and impregnable.  A close look up on the handy stepladder nearby reveals a perfectly circular hair's breadth groove cut into it, however -- the hole is just large enough for someone your size to barely squeeze through, which should also mean you can support the stone once you open the hole and avoid a loud crashing of stone and/or crushed thief flesh.",
        name 'cellar' 'basement' 'undercarriage',
        u_to Vault_Trapdoor,
        n_to Grandiossuary,
        scored_value 10
        has scored light;
    
   Object Vault_Trapdoor "Trapdoor"
      with name 'trapdoor' 'hole',
           description "This carefully hewn trapdoor has been secured with several invisible clamps; your conspirators have provided you with an illustration of where they were placed.",
           when_open     "The vault trapdoor stands open, the maw of opportunity.",
           when_closed   "The vault trapdoor remains closed.",
           door_to [; if(location==Vault) return Cellar; else return Vault;],
           door_dir [; if(location==Cellar) return u_to; else return d_to;],
           found_in Cellar Vault,
      has static door openable;
   
!    Inform is very good about telling the player what's where automatically.  I want to suppress that behavior somewhat to implement a secret compartment.  Basically I want a small box within a big box that is hinted at by the big box's description, and the player should be able to interact with the small box via attempting to take actions targeting one of the many possible dictionary names I've provided for the small box:
! ```
! Object BigBox "The Big Box"
!  with name 'big box',
!         description "This is a very big box.  It's empty, though the inside looks suspiciously smaller than you thought it would based on the exterior.  The fold-down flap system is needlessly complex, and folded like masterwork origami.  It bulges oddly.",
!  has static container openable open;

! Object -> SmallBox
!  with name 'small box' 'inside' 'hidden area' 'hidden' 'hidden compartment' 'flaps' 'odd flaps',
!          description "A gentle shake rewards you with expensive-sounding jingles.",
!          before [;
!                      look:
!                       print "Eureka!  Upon fiddling with the box's flaps, a smaller box with goodies jangling inside tumbles out into your hand.";
!                       move SmallBox to player;
!                       rtrue;
!                     ],
!  has container openable concealed;
! ```
! This works as far as not printing out that the small box is inside the big box, but the user is not able to discover the small box with input like "look at flaps" presumably because the SmallBox object mapped to dictionary word flaps is concealed and therefore the library assumes the player can't act on it (?)

! How would one trick Inform into recognizing an object as present in the game world without automatically calling out its presence to the player?
! UPDATE: turns out the above does work -- my mistake was using multi-word space-delimited name tokens, which apparently Inform 6 does not support (name 'smallest of boxes' is not recognized at runtime when the user types 'look at smallest of boxes').  You need to use <name 'smallest' 'of' 'boxes'> for something that you want recognized as 'smallest of boxes'; Inform will try to match dictionary tokens on a closest-fit basis, such that if you had 'smallest' 'of' 'boxes' and another object with 'smallest' 'of' 'cans' a user input of 'smallest' would be ambiguous but 'smallest cans' should match the can rather than the box.
    
    
    ! The Vault: N of the Grandiossuary is the public heart of the dwarven treasury, holding immeasurable wealth
    Object Vault "A vault capable of keeping anything out... or in"
       with initial
          "Mountains of gold coins, shimmering gems in every color of the rainbow plus a few you're certain you've never seen before, and powerful artifacts humming with magical potential languish in idle safety before you.  Your mouth begins to water, but you staunchly refuse to be distracted from your true goal: The OmniNomicron.  It should be here somewhere amidst the hoard.  Before you can search, a booming voice fills your mind.  Its volume and intensity are indescribable, and you fall to your knees and pound at your head in a vain effort to dislodge the irreconcilable presence.  ~Welcome, Thief.  We know what you are for we summoned you.  Our servants were our mouthpieces, but that matters not.  The will was our own, as it was your will to answer the summons.  A contract has been written between us, tacit and informal perhaps, but no less cooperative for this.  It is this connection that allows us to touch your mind when you stand so near to anything and everything you could wish for.  If you take the Paradox and go, our servants will destroy you for a traitor; they have no true interest in material gain.  If you take the OmniNomicron and do battle with them you might prevail, but we will hound you the rest of your days.  A third choice waits, just beyond the boundaries of your understanding of reality -- come to us, free us, and you will have pow-~ *fghzzzz* With a blinding flash from the Rainbow Coil stretched around the room's perimiter, the presence vanishes from your mind.  The vaccuum it leaves is at once relief incarnate and a horrific mirror revealing your own sudden sense of microscopic substance.",
            description "Mountains of gold coins, shimmering gems in every color of the rainbow plus a few you're certain you've never seen before, and powerful artifacts humming with magical potential languish in idle safety before you.",
            before [;
                     examine:
                        if(BarbedBridge in Vault) {
                           "A haunting and, in all likelihood, haunted bridge stands to the North.^";
                        }
                     ! as soon as the player enters the Vault, the truth is revealed to them so raise the flag
                     go:
                        truth_known = true;
                        rfalse;
                   ],
        s_to Vault_Door,
        d_to Vault_Trapdoor,
        n_to [; if(BarbedBridge in Vault) return BarbedBridge;],
        scored_value 50,
        is_rainbow_coil_active true,
        has scored light;

    Object -> RainbowCoil "Rainbow Coil"
      with name 'rainbow' 'coil',
           description "All you can see of the Rainbow Coil with your naked eye is a slightly shimmering harsh white glow; it's this room's only light source, in fact, and is more than enough.  The glow emanates from a thickly braided cable made of myriad precious metals that runs around the perimeter of the room's ceiling.",
           ! gem puzzle?  I'm thinking with the verdant hint in the warden's chamber that the solution will be to hold the ruby and sapphire gems together to filter out all but green from the light actually shining on the northern vault wall.  Mechanically, this'd be something like use ruby on sapphire to get a combined gem with the red + blue properties, and then use that on the north wall.  This will reveal the passage, which is filled with divine fire and needs the Magma Heart to pass through.  Revealing the passage, however, will allow the Lost Lords to speak to the player, saying that the fire is a defense of the wardens here, and that the means to pass must be somewhere within the treasury.  They will then proceed to open all locked containers, allowing the player to go back and nab the magma heart as well as other collectibles for points.
      has static;
    
    ! the walls in the vault are addressable objects, and the NorthWall will open to reveal The Barbed Bridge
    Object -> NorthWall "North Wall of the Vault"
      with name 'north' 'wall',
           description "The north wall of the vault is oddly bare, with stonework whose wear appears suspiciously like an average of that exhibited by the other three walls.",
      has static;

    Object -> EastWall "East Wall of the Vault"
      with name 'east' 'wall',
           description "The east wall is lined with bookcases.  You smile as you imagine your bibliophile book fence fainting dead away at the sight of all these 1st editions", 
      has static;

    Object -> SouthWall "South Wall of the Vault"
      with name 'south' 'wall',
           description "The south wall is cluttered with trophy cases upon which are perched the stuffed remains of numerous extinct species.",
      has static;

    Object -> WestWall "West Wall of the Vault" 
      with name 'west' 'wall',
           description "Arms and armor adorn the ground level of the west wall, with original prints from famous artists dancing in a purposeful, ordered sort of chaos above them.",
      has static; 

    ! bridge serves as a door between Vault and Maw
    Object BarbedBridge "Barbed Bridge"
      with name 'barbed' 'bridge',
           description "Teeth of stone line the edges of this old stone bridge, the only barrier between one traversing the bridge and the yawning emptiness on either side.  Cracks and pits mar its surface liberally, with layers upon layers of spider webs crisscrossed between them; the spiders might well be its only maintainers.",
           before [;
                     go:
                        if(self.fire_lasers) {
                           if(~(MagmaHeart in player)) {
                              ! have fire beams spin up, preventing travel
                              print "^As you try to step onto the bridge, massive pillars of flame shoot out of the darkness all around and alight upon the bridge.  They dance to and fro in a complex and disturbingly beautiful waltz.  One nearby seems to flush from gold to deep scarlet and then approach another before the two spin off close together.  Though the flames scorch the bridge's surface at first, the hurt disappears as if it had never been moments later.  Still, you imagine if these fire lasers cut you to ribbons you would remain dead.  While you ponder this new lovely wrinkle, the booming voice from earlier rumbles back into your head as if it never left; this time, you remain standing and in fact feel a certain longing emptiness inside at once fulfilled.  ~Good little soul, you have bridged the gap between the forgettable truth of 'what is' and the glorious landscape of 'what could be' for you.  You must not let their petty traps dissuade you -- search the Treasury proper for something to disable this warding.~  For a moment, reality seems to twist and your stomach heaves violently before things come back into focus.  ~All that was once denied you in this place is now open, all locks opened and all secrets unveiled.~^";
                              ! todo: is there an unlock all command?
                              give CrystalChest ~locked;
                              rtrue;
                           } else {
                              print "^The very instant your pack passes the threshold between the Vault and the Barbed Bridge, the heart of magma rises of its own accord and all the fire scouring the bridge's surface is drawn directly into it.  A torrent of hellfire surges toward you, but there is no pain; the heart absorbs all the wrath and wild fury of the concept of combustion itself, and then the light show abruptly ends.  When your vision clears, the bridge stretches out before you unobstructed but still uninviting.^";
                              self.fire_lasers = false;
                              rtrue;
                           }
                        } else {
                           if(Vault.is_rainbow_coil_active) {
                              ! shut down rainbow coil in rainbow serpent form before allowing player forward
                              print "^As you set foot on the Barbed Bridge, you hear a grating hiss behind you.  Turning swiftly, you see the coil stretched around the Vault's ceiling twist and transform into a vast glowing serpent with rainbow scales and bands of colorful feathers at intervals along its length.  Its fanged maw levels with your face as its body thrashes, and you see terrified despair in its eyes.  Before you can even jump back, the serpent's scales alight with gorgeously colorful flames.  In an instant they wither and dissolve into dust, its sad eyes melt, and its feathers wilt away to nothing.  A great hulk of bone crashes to the ground behind you, scattering material treasures like so much debris.  The only light remaining comes from the standing fires over the bridge, which seem to burn more brightly now than ever.  A fell wind ruffles your hair, carrying bits of clashing dust and stone that produce a sound that reminds you of laughter despite running somehow fundamentally counter to any and all expressions of joy.  An involuntary shiver runs down your spine.^";
                           }
                           rfalse;
                        }
                  ],
           after [;
                     examine:
                        if(location == Vault) {
                           "Lightning flashes out in the void beyond the bridge, and you can make out the sultry sullen glow of standing fire at its far end.";
                        } else {
                           "Tantalizing treasure glitters at the far side of the bridge; that, combined with the haunting voices of lingering ghosts whispering that you should delve deeper into the Maw, make a compelling case to abandon your exploration and flee back to relative safety.";
                        }
                 ],
           door_to [; if (location == Vault) return MawOfInfinity; else return Vault;],
           door_dir [; if (location == Vault) return n_to; else return s_to;],
           fire_lasers true,
      has static door open; 

    ! todo: currently you can make the compound gem and still have the original gems present; no big, but the making of the compound gem should consume them until the compound gem is taken apart again.  This'd need explanation like 'they snap together so easily you could disassemble them again if you wanted.'
    ! the player uses a gem on another to create the compound gemwork; with it, they can reflect two primary color spectra from the rainbow coil's white light.
    Object CompoundGem "Compound Gemwork"
      with name 'compund' 'gem' 'gemwork',
           before [;
                     examine:
                        "^This construct combines ", (the)self.part_1_gem, " and ", (the)self.part_2_gem, ".^";
                        !print "^DEBUG: ruby lion address is ", RubyLion, ", emerald faerie is ", EmeraldFaerie, ", and sapphire siren is ", SapphireSiren, "^";
                        !rtrue;
                     use:
                        if((self.part_1_gem == RubyLion && self.part_2_gem == SapphireSiren)
                           || (self.part_1_gem == SapphireSiren && self.part_2_gem == RubyLion)
                           && second == NorthWall) {
                           ! handle bridge summoned into juxtaposition with the north wall
                           print "^You hold the ruby and sapphire gem sculptures together, filtering out all but the green hues, as innumerable as life's many forms, from the strange ceiling coil.  As a brilliant verdant glow bathes the north wall, you feel like you've conjured life... or perhaps summoned it.  Before you can register this notion as odd, the wall before you dissolves into ghostly tendrils of gray-black smoke.  These swirl about the room for a moment, brushing about your person playfully before retreating into a vast abyss where the north wall once stood.  A stone bridge out of nightmare, a thing clearly constructed for the purpose of making a crossing but also to dissuade anyone from choosing to use it, meanders into existence from deep within the darkness and extending towards you.  With a soft *chunk* it meets the edge of the Vault floor, and a sigh of displaced air beckons.^";
                           move BarbedBridge to Vault;
                           rtrue;
                        } else {
                           ! handle flavor text for other combos, also giving hint at what the CompoundGem accomplishes
                           if((self.part_1_gem == RubyLion && self.part_2_gem == EmeraldFaerie)
                           || (self.part_1_gem == EmeraldFaerie && self.part_2_gem == RubyLion)) {
                              "Soothing blue light shines upon ", (the)second, " making you feel calm for a moment.^";
                           } 
                           else if((self.part_1_gem == RubyLion && self.part_2_gem == SapphireSiren)
                           || (self.part_1_gem == SapphireSiren && self.part_2_gem == RubyLion)) {
                              ! right color, wrong target
                              "Verdant light bathes ", (the)second, " reminding you of summer days spent reading or adventuring through woods as a child.  After all this time in the city, you've nearly forgotten the countless forms of life making up the world that have no concern for wealth or secrets or people.^";
                           }
                           else if((self.part_1_gem == SapphireSiren && self.part_2_gem == EmeraldFaerie)
                           || (self.part_1_gem == EmeraldFaerie && self.part_2_gem == SapphireSiren)) {
                              "Burning crimson imparts a sort of furious energy to ", (the)second, " but only in your perception.^";
                           }
                        }
                  ],
           part_1_gem,
           part_2_gem;
   
    Class VaultGem
      class Object 
      with before [;
                  use:
                     print "^You socket ", (the)noun, " into ", (the)second, ".  Against all odds, they fit seamlessly.^";
                     CompoundGem.part_1_gem = self;
                     CompoundGem.part_2_gem = second;
                     move CompoundGem to player;
                     rtrue;
                 ];

    ! used to filter out red light wavelengths
    VaultGem RubyLion "Ruby Lion"
     with name 'ruby' 'lion',
          description "Though it cannot technically make a sound, this proud lion's mere presence roars as surely as the genuine article: innumerable facets of three distinct and impossibly life-like cut rubies form its mane, body, and eyes, and they've been slotted together seamlessly.",
          found_in Vault;
          

    ! used to filter out green light wavelengths  
    VaultGem EmeraldFaerie "Emerald Faerie"
     with name 'emerald' 'faerie',
          description "Her impish grin a dead giveaway, this little beauty clearly has mischief in mind.  You marvel at the slender translucent sheets of intricately shaped emerald that form her wings and the minute filaments and shards that make up her wild hair.  She looks like she could take flight at any moment.",
          found_in Vault;

    VaultGem SapphireSiren "Sapphire Siren"
     with name 'sapphire' 'siren',
          description "The crash of ocean waves fills your mind as you gaze upon the unfathomably deep blue of this sapphire mermaid.  Myriad subtle shades of blue compose the shimmering scales of her tail, and you can imagine the sun shining merrily down upon her as she stretches luxuriously. She wears only a knowing smirk, and a blush blooms in your cheeks as you note that the gemstone of her right arm, with which she is lazily covering her chest, is slightly more translucent than that of her body and allows a peek through.  The sculptor did not omit details due to (partial) occlusion.",
          found_in Vault;

    ! used to break white light of the coil into components, this platypus serves as another hint that green is the man you want, and on the north wall -- when the green of the separated spectrum lands on the north wall (via use platypus on north wall)
    Object PrismaticCrystalPlatypus "Prismatic Crystalline Platypus"
      with name 'prismatic' 'crystalline' 'crystal' 'platypus',
           ! little shoutout to zefrank1's true facts series, though he was talking about a reverse-camo octopus 
           description "Ah the noble platypus, the world's token nonconformist.  He does what he pleases, and wonders why the rest of the world doesn't try to blend in with him.  You go, little man; don't go changin' for nobody.  The detail on this rendition is phenomenal: the bill alone has more facets than you can count, and moving it through the eerie light in the room yields fireworks of sparkling reflections and splashes a lovely rainbow blanket over whatever surface lies beyond it.  It softens the imposing mountain of treasures from blinding gold to a whimsical tableau of dancing color.",
           found_in Vault;

    Object FirstEditionsBookcase "Bookcase of Irreplaceable 1st Editions"
      with name 'bookcase' 'of' 'irrepleaceable' '1st' 'first' 'editions',
           description "This bookcase is carved from a single piece of Brazilian Rosewood, just because they could afford it.",
           found_in Vault,
      has static container open;
   
    Object -> Paradox "Nnamni's My God: The Paradox"
      with name 'nnamni^s' 'my' 'god' 'god:' 'the' 'paradox',
           description "A tale of heretical philosophy that turned the ancient world on its head, this text woke everyone to the irreconcilable contradictions of the dominant religion of the time.  Said religion had a stranglehold on the world's faith for thousands of years, none brave or wary enough to question it until mighty Nnamni.  Now there are almost as many religions as there are folk, and the inevitable quarrels that break out between clashing belief systems are at least limited to bar fights and neighborly feuds rather than the wars that ravaged the ancient world.  Everyone knows of Nnamni's pivotal work, and though a 1st edition is technically priceless, your fence will power through that and surely come up with a tidy king's ransom for it.",
           scored_value 50,
      has scored;

    Object Pedestal "Oppulent Pedestal"
      with name 'oppulent' 'pedestal',
           description "Gold, silver, and platinum filigree adorn this stone ostentatious stone pedestal.  It's clearly meant to draw the eye!",
           found_in Vault,
      has static supporter;
    
    ! ideally we'd let the player choose how/whether to use the omninomicron, but that would require going beyond the scope of this mini game.  Therefore, we'll rule that if they hit the Edge of Nothing and All with the Omninomicron and the Wand of Warding, then they go on to fight the cultists.  Omninomicron without Wand leads to worst ending, where they empower the Lost Lords.     
    Object -> OmniNomicron "OmniNomicron"
      with name 'omninomicron',
           before [;
                     examine:
                        ! todo: player knows truth after entering Maw of Infinity, and can still exit it until they gaze upon The Edge of Nothing and All.
                        if(truth_known) {
                           "This is it!  The mightiest tome in the known multiverse, the OmniNomicron not only has the most comprehensive list of legendary dwarven recipes ever compiled, but also is capable of transmuting matter into ingredients for said recipes!  Some of the more advanced formulae can reduce enemy armies into tasty treats ready to serve.  Not even the Cult of the Lost could stand before its might... a twinge of conscious bugs you, for you may unwittingly and unwillingly have become the last hope for the world as you know it.";
                        } else {
                           "This is it!  The mightiest tome in the known multiverse, the OmniNomicron not only has the most comprehensive list of legendary dwarven recipes ever compiled, but also is capable of transmuting matter into ingredients for said recipes!  Some of the more advanced formulae can reduce enemy armies into tasty treats ready to serve.  With this, you've no need to share the spoils reaped from fencing ~My God: The Paradox~ with any co-conspirators -- they'll either back off or become food.";
                        }
                  ],
           scored_value 100,
      has scored;
    
    Object Vault_Door "An immeasurably heavy steel door"
       with name "Vault" "Door",
            description "The door to the vault showcases the Dwarves' pragmatism: neither gilding nor carvings adorn the barrier separating the covetous from their untold riches.  Rather, the heavy steel construction that is so heavy it requires an inricate system of levers and counterweights even for approved visitors to open speaks for itself.  The actual lock, you imagine, is complex beyond all comprehension.",
            door_to [; if (location == Vault) return Grandiossuary; else return Vault;],
            door_dir [; if (location == Vault) return s_to; else return n_to;],
            found_in Vault Grandiossuary,
            before [; 
                     Examine:
                        if(location == Grandiossuary) {
                           if(~(self has open)) {
                              "The vault door stubbornly separates stalwart ~treasure hunters~ (such as you) from the hidden wonders within.";
                           } else {
                              "The vault door stands ajar, a looming temptation.";
                           }
                        }
                     Open:
                      if(Skjordun.isWatching() || Falknir.isWatching()) {
                        print "The guards eye you warily as you fiddle with the vault door's opening mechanism.  ~Please step away from that.  Immediately.~^";
                        rtrue;
                      }
                      
                   ],
            has static door openable lockable locked;
    
!     Object BigBox "The Big Box"
!  with name 'big' 'box',
!         description "This is a very big box.  It's empty, though the inside looks suspiciously smaller than you thought it would based on the exterior.  The fold-down flap system is needlessly complex, and folded like masterwork origami.  It bulges oddly.",
!         found_in Grandiossuary,
!  has static container openable open;

! Object -> SmallBox
!  with name 'small box' 'inside' 'hidden area' 'hidden' 'hidden compartment' 'flaps' 'odd flaps',
!          description "A gentle shake rewards you with expensive-sounding jingles.",
!          before [;
!                      examine:
!                       print "Eureka!  Upon fiddling with the box's flaps, a smaller box with goodies jangling inside tumbles out into your hand.";
!                       move SmallBox to player;
!                       rtrue;
!                     ],
!  has container openable concealed;
            
    ! The Archive: NW off the Grandiossuary, this chamber hosts
    ! the collected lore of the Treasury.  There are copious ledgers
    ! here, as one would expect, and beneath this veneer of practicality lurks
    ! evidence of a sinister obsession.  Tomes of lore regarding eldritch 
    ! monstrosities from a thousand thousand different mythologies are hidden here
    ! and there throughout the collection, with copious annotations from 
    ! the Treasury's Archivist.  His notes suggest not only an obsession,
    ! but a disturbing familiarity...
    Object Archive "The Archive of Treasured Memory"
      with description
        "Bookcases filled with accounting ledgers line the walls here, making the room stuffy despite being quite large.  As a draft rustles the ancient yellowed pages of a nearby text, you wonder why a Treasury needs its own library.  Whispers just beyond hearing plague the silence.",
           se_to Grandiossuary,
      has light;
   
    ! add creepy books to the Archive, hinting at lore
    Object -> DreamscapeAtlas "Dreamscape Atlas"
      with name 'atlas' 'dreamscape atlas' 'dreamscape',
           description "A weathered tome, its leather binding cracked by age and frequent reference, sits open on a table set before a comfortable winged reading chair.",
           before [; read:
                        "The book describes impossible environs, laws of nature that simply cannot be, and creatures that could never live.  It reads like the diary of a mad naturalist surveying VERY uncharted territory.  One entry describes in detail a humanoid creature with no bones or organs, only soft fur, and which is sustained by joy -- its own and that of the friends it makes with every creature it comes into contact with.  Another details a land no more than a mile wide where gravity simply takes a turn sideways when it wants, sending things flying or floating towards sky, ground, or mountainsides willy nilly.  What an odd book for a bank.";
                  ],
      has legible openable open;

      Object -> BestiaryOfInfinity "Bestiary of Infinity"
         with name 'bestiary' 'infinity book',
              description "Bound in a strange oily hide with patches of withered scales, certainly not from any animal you recognize (or so you hope), this book sits on its side on top of a nearby bookshelf.  It somehow manages to look restless.",
              before [; read:
                           "~There are creatures great and small all around us in our everyday lives, but these are of no importance.  The claws and teeth and mind-bending power to create, shape, and destroy universes unique to godbeasts are our singular point of interest, and we shall discuss herein the mathematics dictating their terrible majesty.~  This encyclopedia has troubling entries about myriad huge and imposing creatures out of dream and nightmare.  Hundreds of them.  Toothy and tentacled titans adorn every page, adding a physically painful visual overture to the fearsome stage already set for the theater of the mind by the text.  You can't make tails or feathers of the complex diagrams and formulae scattered amongst the colorful descriptions, but you note with a shudder that the mountain in the background of many of the illuminations looks distressingly familiar -- it can only be Mount Godspeak, out of which the Royal Treasury was carved."; 
                     ],
         has legible openable open;

      ! flavor, and contains a crucial hint about how to foil the rainbow coil in the vault
      Object -> Abjurataraxia "Abjurataraxia: Words about Wards"
         with name 'abjurataraxia' 'ward book' 'book of wards' 'words about wards',
              description "A red silken bookmark leads to a chapter about summoning seals; judging by the fading on these pages from exposure to light relative to the rest of the book, this chapter is referenced often.",
              before [; read: 
                           "~When dealing with demons, devils, wild gods, and other uncouth sorts, the most important measures to consider are containment and control.  Whatever you've caught, it's not going to take kindly to confinement; that's just the nature of life.  That said, if you're reading this then you've caught something nasty indeed, so for pity's sake please heed my instructions carefully. Below follow a few basic wards one can construct to protect oneself.  Do note, however, that a certain amount of magical ^radiation^, if you will, leaking through any ward is to be expected.  Best not hang around too close to your captured charges, especially if they've had a while to acclimate themselves to your plane of existence -- once they've sorted out their power, some creatures' influence cannot be bound by wards no matter the strength.~  Incidentally, you wonder where the Archivist is.  ~Said radiative power can be itself combated: the easiest vector is to apply a countercurrent radiation bearing wave properties inverse to those of the naughty godbeast you wish to suppress.  Light suggests itself readily, and you'll find that certain eldritch hues that can only be generated faithfully by running a huge amount of energy through rare and precious metals will often serve this function well.  Some think the metals are themselves divine, a gift from benevolent gods seeking to protect us from ourselves.  In this author's opinion, it was sheer dumb luck.  These same lights, when combined with arcane wards, can have peculiar and occasionally beneficial side effects, such as producing illusions.  These, along with any demonic suppression efficacy, can of course be derailed within certain span by bending the light through a prism or similar medium.~";
              ],
         has legible openable open;
    
    ! todo: if moving the consult token parsing hack to WardenChamber so it gets hit no matter what we do (target context will start at the room you're in), then try the BeforeParsing() entry point. UPDATE: yeah, the consultwords hack only really helps with more freeform verbs like say X to Y.  It looks like more conrete object-based verbs like take, look at, open etc. won't even run the handlers unless Inform recognizes the target object, and any extra text gets lumped in with the target object lookup causing it to fail.  UPDATE2: oh cool, Inform 6 v6.34 doesn't recognize these entry points.  Fuzzlemungoose.
    ![BeforeParsing;
    !  print "in BeforeParsing";
    !];
     

    ! The Warden's Chamber: NE off the Grandiossuary, this is the office of 
    ! the Treasurer.  He introduces himself as such, but the arcane wards and
    ! seals scattered throughout his inventory suggest that his main role
    ! is as a jailor for something beyond what mundane cages can contain.
    Object WardenChamber "The Treasurer's Office"
      with description
        "A few ledgers are placed ostentatiously, though the layer of dust upon them suggests they are not visited as often as one would expect.  The walls are decorated with odd symbols, one of which you recognize as a symbol of warding against the local Goddess of Lost Things, Amyria.  That one's not so strange for an accountant but the dozens of others, along with copious arcane-looking artifacts on display, seem suspicious.",
         ! todo: hard to get this triggering with any consult tokens -- the object targeting verbs like look at, take, open... are pretty rigid so saying "look at bottom of upper right drawer" will simply result in 'you can't see any such thing' before the before handlers run.  Probably a raw entry point like BeforeParse() is in order if we want this, but the take/look at concealed hack below works for secret compartment stuff.
         !   before [baseTokenCurrentCount baseTokenExpectedCount baseTokensFound auxTokensFound consultToken consultWords;!queryTokensBase queryTokensAuxiliary; 
         !             !print "the action taken is ", (address)action; ! nope, just gives garbage and action alone gives and address (?)
         !             print "running before handlers for WardenChamber...^";
         !             baseTokenCurrentCount = 0;
         !             baseTokenExpectedCount = 3;
         !             baseTokensFound = false;
         !             auxTokensFound = false;
         !             consultToken = 'placeholder';
         !             consultWords = consult_words;
         !             wn = consult_from;
         !             if(~WardenDesk.secret_compartment_discovered) {
         !                ! this was an interesting idea, but the array support in Inform 6 is garbage, so... mrr.
         !                !queryTokensBase 'bottom' 'upper right' 'drawer';
         !                !queryTokensAuxiliary 'lift' 'pull' 'open' 'reveal' 'take';
         !                !if(checkInputForTokensBaseAux(queryTokensBase, queryTokensAuxiliary)) {
         !                while(consultWords) {
         !                   ! the current word from user input that does not fit in the life structure table
         !                   consultToken = NextWord();
         !                   consultWords--;
         !                   ! kinda stupid, but close enough.  Could still be satisfied with 'bottom bottom bottom reveal'... but if the user types that I'm making a ruling as the designer that they deserve the treasure anyway.
         !                   switch(consultToken) {
         !                      'bottom', 'upper right', 'drawer':
         !                         baseTokenCurrentCount++;
         !                      'lift', 'pull', 'open', 'reveal', 'take':
         !                         auxTokensFound = true;
         !                   }
         !                } ! end whileing over the consult tokens
         !                baseTokensFound = baseTokenCurrentCount >= baseTokenExpectedCount;
         !                if(baseTokensFound && auxTokensFound) {
         !                   WardenDesk.secret_compartment_discovered = true;
         !                   move WandOfWarding to WardenDesk;
         !                   print "You lift out the false bottom of the drawer, revealing a velvet lined compartment containing a beautiful wand.";
         !                   rtrue;
         !                }
         !             }
         !             examine:
         !                if(~WardenDesk.secret_compartment_discovered && baseTokensFound) {!checkInputForTokens('bottom' 'upper right' 'drawer')) {
         !                   "Poking at the odd drawer bottom yields a curious wobble, as if the bottom is not actually afixed.";
         !                }
         !             open:
         !                if(~WardenDesk.secret_compartment_discovered) {
         !                   print "As you rifle through the desk drawers, mostly filled with ledgers and logistical nonsense, you notice that the stain on the bottom of the upper right drawer doesn't match the rest.  Even the wood's slightly different.  Newer.^";
         !                   !move SecretDrawerBottom to WardenDesk;
         !                } else {
         !                   print "Like a guilty conscience, the secret compartment beneath the upper right drawer refuses to be concealed properly no matter how you futz with the removable panel.^";
         !                }
         !                rfalse;
         !   ],
        sw_to Grandiossuary,
        has light;

    ! add ward objects to the WardenChamber, with something(s) that can be used to disarm the fire lasers in the passage leading into the Maw of Infinity from the Vault 

    Object -> CrystalChest "Crystal Chest"
      with name 'crystal chest' 'chest',
           description "This chest is constructed entirely from translucent crystal, which appears to have been grown into the required shape rather than carved.  It's only the size of a common dog, but it's impossibly heavy (also like the common dog, one who doesn't want to be picked up).  You can see a faint violet light pulsing from within.",
      has static openable lockable locked;
   
    Object -> -> MagmaHeart "Heart of Magma"
      with name 'heart' 'heart of magma' 'magma',
           description "This strange glowing stone appears to be a sphere of magma, heat pulsing furiously out from between cracks in its (relatively?) cooled surface, yet you feel no heat radiating off it. In fact, your breath steams the inside of the crystal chest as if in a winter chill when you bend close to examine the sphere.",
           before [;
                     take:
                        print "^As you lift the sphere, you begin to shiver and note a distinct pallor sweep over your skin.  You toss it in your pack hastily.^";
                        move self to player;
                        rtrue;
                     use:
                        if(player in Vault) {
                           if(BarbedBridge.fire_lasers) {
                              if(second == BarbedBridge) {
                                 ! turn off fire beams, and have the rainbow coil turn into a thrashing rainbow serpent for a moment and then go dark.  Light spins up as the standing flames beyond the bridge grow brighter etc.
                                 print "^The very instant the heart of magma passes the threshold between the Vault and the Barbed Bridge, all the fire scouring the bridge's surface is drawn directly into the heart.  A torrent of hellfire surges at and into your outstretched hands, but there is no pain; the heart absorbs all the wrath and wild fury of the concept of combustion itself, and then the light show abruptly ends.  When your vision clears, the bridge stretches out before you unobstructed but still uninviting.^";
                                 BarbedBridge.fire_lasers = false;
                                 rtrue;
                              } else if(BarbedBridge in Vault){
                                 ! hint at usage on fire beams, maybe heart pulses in their direction yearningly
                                 print "^Nothing obvious happens when you use the heart of magma on ", (the)second, ", but you do notice the heart pulsing strongly in the direction of the bridge.  Furiously oscillating flashes of gold and crimson in shrinking concentric circles point towards the bridge on the heart's surface, and you feel an intangible pull in that direction -- a yearning.^";
                                 rtrue;
                              }
                           }
                        }
                  ];
    ! this fn takes in an array of query tokens that we want to match in the <any clause> consult tokens.  It returns true if these tokens are found and false otherwise.
    !Array gTokenArray --> 10; ! only statically sized arrays supported?  Yargh, this language!  I guess traverse until deref is 0? Undeclared variable?
   !  Object ArrayWrapper "Array Wrapper"
   !    with wrappedArray 'placeholder' 'placeholder' 'placeholder' 'placeholder' 'placeholder' 'placeholder' 'placeholder' 'placeholder' 'placeholder' 'placeholder'; !%^#%&^*&
   !  [checkInputForTokens 
   !    consultWords consultToken tokensFound tokenArray; 
   !                   wn = consult_from; ! the magic var wn is the <any clause> token position in the input string where NextWord() will start from 
   !                   consultWords = consult_words; ! the number of understood <any clause> tokens
   !                   tokensFound = 0;
   !                   !gTokenArray = tokenArray;
   !                   while(consultWords) {
   !                      ! the current word from user input that does not fit in the life structure table
   !                      consultToken = NextWord();
   !                      consultWords--;
   !                      print "Examining consult token [", (address)consultToken,"], of ", consultWords," tokens";
   !                      !print "understood noun is [", (address)noun, "] and second is [", (address)second,"]";
   !                      ! check array for a match against current consult token
   !                      index = 0;
   !                      for(index=0: index < ArrayWrapper.#wrappedArray: index++) {
   !                         if(((address)ArrayWrapper.wrappedArray->index) == (address)consultToken) { ! missing operator?  Oh this can go straight to hell
   !                            ! note that another token has been found
   !                            tokensFound++;
   !                            ! remove this token from the query array since it has now been matched
   !                            !tokenArray.remove(index); ! sadly this isn't a thing in Inform 6 and I can't be bothered to find out how it might be implemented.  It was only for performance anyway, and this is a text adventure, so... Oh wait, nm: the algorithm actually doesn't work without removal of tokens on match because then we can't tie a token find to a unique token.  This means that searching for ['bottom', 'drawer', 'search'] would return true for input "bottom bottom bottom".  Butts. Eh, close enough.
   !                         }
   !                      }
   !                   } ! end whileing over the consult tokens

   !                   ! return true if tokensFound is at least equal to the number of query tokens 
   !                   return tokensFound >= ArrayWrapper.#wrappedArray;
   !  ];

   !  ! this fn takes in an array of base query tokens that must all be matched in the <any clause> consult tokens and an auxiliary array of query tokens, only one of which must be matched.  It returns true if these tokens are found and false otherwise.  This allows for an easy check of input for a base set of qualifiers necessary to indicate an otherwise unnamed object or object component e.g. the 'bottom of the upper right drawer' along with a set of words that would all reasonably indicate the same categorical action e.g. 'lift out the bottom of the upper right drawer', 'reveal the bottom of the upepr right drawer', 'pull out the bottom of the upper rigt drawer'...
   !  [checkInputForBaseAuxTokens 
   !    consultWords consultToken tokensFoundBase tokensFoundAux tokenArrayBase tokenArrayAux; 
   !                   wn = consult_from; ! the magic var wn is the <any clause> token position in the input string where NextWord() will start from 
   !                   consultWords = consult_words; ! the number of understood <any clause> tokens
   !                   tokensFoundBase = 0;
   !                   tokensFoundAux = 0;
   !                   while(consultWords) {
   !                      ! the current word from user input that does not fit in the life structure table
   !                      consultToken = NextWord();
   !                      consultWords--;
   !                      print "Examining consult token [", (address)consultToken,"], of ", consultWords," tokens";
   !                      ! check base and aux array for a match against current consult token
   !                      index = 0;
   !                      for(index=0: index < #tokenArray: index++) {
   !                         if((address)tokenArrayBase->index == (address)consultToken) {
   !                            ! note that another base token has been found
   !                            tokensFoundBase++;
   !                         } else if(address)tokenArrayAux->index == (address)consultToken) {
   !                            ! note that another aux token has been found
   !                            tokensFoundAux++;
   !                         }
   !                      }
   !                   } ! end whileing over the consult tokens

   !                   ! return true if tokensFoundBase is at least equal to the number of base query tokens AND tokensFoundAux is at least 1
   !                   return tokensFoundBase >= #tokenArrayBase && tokensFoundAux >= 1;
   !  ];
    
    ! sticky note with crucial hint about green light shone on the north wall of the vault opening the bridge
    Object WardenDesk "Grand Mahagony Desk"
      with name 'grand mahagony desk' 'grand desk' 'mahagony desk' 'desk',
           description "This lovely mahagony desk is well-polished and meticulously ordered.  Several books lie open on the surface, each detailing methods of banishment for demonic figures.  The Treasurer must be a superstitious sort.  A hand-written note written in huge block letters is secured to the front of the desk, visible only to one sitting at it but emminently visible to that person -- it reads, ~Always remember the great and terrible truth of nature: life is the beginning of death, in all ways.  Do not cast about thoughtlessly that which is VERDANT lest you construct a bridge to certain death, frozen and BOREAL.~",
         !   before [baseTokenCurrentCount baseTokenExpectedCount baseTokensFound auxTokensFound consultToken consultWords;!queryTokensBase queryTokensAuxiliary; 
         before [;
         !             !print "the action taken is ", (address)action; ! nope, just gives garbage and action alone gives and address (?)
         !             baseTokenCurrentCount = 0;
         !             baseTokenExpectedCount = 3;
         !             baseTokensFound = false;
         !             auxTokensFound = false;
         !             consultToken = 'placeholder';
         !             consultWords = consult_words;
         !             wn = consult_from;
         !             if(~self.secret_compartment_discovered) {
         !                ! this was an interesting idea, but the array support in Inform 6 is garbage, so... mrr.
         !                !queryTokensBase 'bottom' 'upper right' 'drawer';
         !                !queryTokensAuxiliary 'lift' 'pull' 'open' 'reveal' 'take';
         !                !if(checkInputForTokensBaseAux(queryTokensBase, queryTokensAuxiliary)) {
         !                while(consultWords) {
         !                   ! the current word from user input that does not fit in the life structure table
         !                   consultToken = NextWord();
         !                   consultWords--;
         !                   ! kinda stupid, but close enough.  Could still be satisfied with 'bottom bottom bottom reveal'... but if the user types that I'm making a ruling as the designer that they deserve the treasure anyway.
         !                   switch(consultToken) {
         !                      'bottom', 'upper right', 'drawer':
         !                         baseTokenCurrentCount++;
         !                      'lift', 'pull', 'open', 'reveal', 'take':
         !                         auxTokensFound = true;
         !                   }
         !                } ! end whileing over the consult tokens
         !                baseTokensFound = baseTokenCurrentCount >= baseTokenExpectedCount;
         !                if(baseTokensFound && auxTokensFound) {
         !                   self.secret_compartment_discovered = true;
         !                   move WandOfWarding to WardenDesk;
         !                   print "You lift out the false bottom of the drawer, revealing a velvet lined compartment containing a beautiful wand.";
         !                   rtrue;
         !                }
         !             }
         !             examine:
         !                if(~self.secret_compartment_discovered && baseTokensFound) {!checkInputForTokens('bottom' 'upper right' 'drawer')) {
         !                   "Poking at the odd drawer bottom yields a curious wobble, as if the bottom is not actually afixed.";
         !                }
                     open: ! note: if you're gonna override open behavior, you need to rfalse at then end for objects inside a container to actually be there as far as the library is concerned
                        if(~self.secret_compartment_discovered) {
                           print "^As you rifle through the desk drawers, mostly filled with ledgers and logistical nonsense, you notice that the stain on the bottom of the upper right drawer doesn't match the rest.  Even the wood's slightly different.  Newer.^";
                        } else {
                           print "^Like a guilty conscience, the secret compartment beneath the upper right drawer refuses to be concealed properly no matter how you futz with the removable panel.  It's a nice bit of wood; might as well keep it.^";
                        }
                        rfalse;

                   ],
            secret_compartment_discovered false,
            found_in WardenChamber,
      has static openable container;
    
    Object -> SecretDrawerBottom
      with name 'drawer' 'bottom' 'upper' 'right' 'drawer' 'secret' 'panel',
           description "Looks awfully fishy, and newer than the rest of the desk's material.",
           before [;
                     take:
                        print "Eureka!  Removing the false bottom panel of this drawer reveals a hidden compartment, in which rests a treasure beyond measure!^";
                        move WandOfWarding to WardenDesk;
                        rfalse;
                  ],
           scored_value 10,
      has scored concealed; 

    ! todo: give the player a turn in the Edge of All and Nothing before they are consumed by the abyss and all that lives there to use the wand to fend it off for an instant.  This will let them flee screaming, achieving the 'good' ending.  If they have the OmniNomicron, they can even decide to declare war upon the cult and their foul gods using its power? 
    Object WandOfWarding "Wand of Warding" ! put this in limbo by default so that player has to 'open a secret compartment' to teleport it in
      with name 'wand' 'warding',
           description "The Wand of Warding is a beautifully carved 20cm length of wood from a Bodhi Tree with a strange rainbow helix arrangement of multi-hued gemstones fastened to the tip.  Looking closer, you actually can't determine how the stones are connected to the wood -- they appear to grow seamlessly from it.  A tingle of power runs through your hand as you grasp it.  Tiny and stunningly intricate scenes of mythological battle ornament its entire surface: the wielder of a minute wand holds it dramatically before themselves, keeping at bay or banishing hordes of horned phantasms.",
           before [;
                     use:
                        if(second == TheLost) {
                           ! flip the wand switch
                           EdgeOfAllAndNothing.is_wand_used = true;
                           rtrue;
                        }
                  ],
           score_value 25,
      has scored;
    
    ! The Maw of Infinity: N of the Vault, the entryway to the Tomb of Forgotten Gods,
    ! it is here that player encounters their cosmic tease and the end 
    ! of their journey.
    Object MawOfInfinity "Maw of Infinity"
      with description
        "Mount Godspeak is not supposed to be hollow, but you stand in a yawning cavern beyond the carefully hewn stone of the Treasury behind you.  You stand on a narrow outcropping that stretches out over an infinite abyss, something of a lookout point.  Things stir in the darkness and all the hair on your body stands on end.  Away North stretches a sort of platform made of muted light, barely visible against the backdrop of inky blackness.  ~Step forward little soul, if you feel you are ready to meet your destiny!~  The voices in your head, now an uncountable myriad rather than a mere single monstrous godbeast howl, beckon you urgently.",
           scored_value 100,
           n_to EdgeOfAllAndNothing, 
           s_to Vault,
      has scored light;
    
    ! the end of the line
    Object EdgeOfAllAndNothing "Edge of All and Nothing"
      with description "Ghostly forms swirl about you, variously wailing and cackling, and a glowing mass that fills the horizon in all directions floats out in the darkness like a patient predator.  Faces swarm over its surface and innumerable pseudopod limbs reach toward you; some seem gently, others aggressive, but all bear an urgently covetous manner.  ~We are the Lost Lords, gods of this land that your kind have forsaken.  You, little soul who wandered willingly into our lair -- you are... OURS!~  The tendrils and tongues and teeth of this amalgam of forgotten gods surge forward, converging on your position!  You won't get a second chance to act.",
           before [;
                     go:
                        print "You try to flee the might of the impossibility looming before you, but mortal space and time mean nothing to them; spectral claws arc out of nothing and snatch you up like a plaything.";
                        print "^The Forgotten Gods pounce upon you, tearing you apart at the molecular level.  They leave your senses intact as long as possible in order to maximize your suffering, which seems to be a delicacy to them.  Since you have so helpfully lowered all the defenses against them and provided them with a battery of life force and pain on which to draw, they are easily able to free themselves to assert their terrible will upon the world.^";
                           if(OmniNomicron in player) {
                              ! the Lost now have the power of the nomicron
                              print "^Howling giddy laughter from a thousand thousand mirthless voices is the last thing you'll ever hear as the tide of darkness and hatred washes over you, into you, and discovers the mighty OmniNomicron in your pack.  Perhaps they could have taken it without your help, but perhaps it wards of its own that you were not aware of.  Ah well, it's no matter to you anymore, for in the next few moments you are reduced to literally no matter.^";
                           } 
                           deadflag = 1;
                           rtrue;
                  ],
           after [;
                     ! todo: if a child event returns true, does the handler of the super context run? e.g. if I say 'use ruby on sapphire', which rtrues, while in EdgeOfAllAndNothing, would we still get here to the after handler of that encompassing room? UPDATE: no, you don't.
                     print "^DEBUG running the after for the Edge, with chances count at ", self.chances_to_act, ".^";

                     ! initial + description passes for the room procs the after handler, so we need to have a counter check
                     self.chances_to_act++;
                        if(self.chances_to_act > 2) {
                        ! add handling for Wand + Omninomicron, modifying the ending branches
                        ! you get 1 turn to use the wand in the Edge, so... after anything, check if is_wand_used was set true (which occurs in the Wand's own use handler) -- if so, they live.  else, they die.  Nomicron possession then further modifies ending branch. 
                        if(self.is_wand_used) {
                           print "Light shines from the tip of the Wand of Warding, sunlight gold and so gentle that even in the midst of nightmare you are soothed.  The mass of monstrosities recoils from the light, and you flee back whence you came with infinite hellhounds on your heels!  The howling cacophony trailing you ceases in an abrupt wallop of silence as you dive back into the Vault, but you don't pause to see if your pursuit has broken off.  Instead, you dive through the trapdoor, clamber up through the air duct, and shoot straight out the Treasury front door to Market Street without slowing down until you're at home, in bed, and under the covers.^";
                           if(OmniNomicron in player) {
                              print "^When you've mastered your fear/bladder, you rise and take the OmniNomicron from your pack.  Together with the Wand of Warding, you just might be able to use this lovely weapon to eradicate all trace of the nightmare Lost Lords and their Cult of the Lost.  Or at least transform them into tasty treats that are relatively harmless.  Every instinct screams at you to run, but you know in your heart that if you run now you will never be able to stop.  Anyway, all this terror has left you awfully peckish...  Steeling your determination, hoping against hope that you aren't alone, you set out to mount a defense for all free creatures of the world!^";
                              deadflag = 2;
                              rtrue;
                           } else {
                              if(WandOfWarding in player) {
                                 ! case where player got away after meeting Lost Lords and kept the Wand of Warding
                                 print "^Fear defines you now.  Though you have the Wand of Warding, you can feel its calming purpose with a touch and you know it could never be used as a weapon.  Your only other choice besides feeding your paranoia and fleeing forever is joining up with or starting a resistance group of some sort.  Hopefully your wand can aid them somehow, and they'll have artifacts of their own that can be turned against the Lost offensively.  Steeling your determination, hoping against hope that you aren't alone, you set out to mount a defense for all free creatures of the world!^";
                                 deadflag = 2;
                                 rtrue;
                              } else {
                                 ! case where player got away after meeting Lost Lords, but did not keep the Wand of Warding
                                 print "^Fear defines you now.  There is no weapon or ward you can turn against the coming nightmare, so there is nothing for it but to run.  Days blur one into the next as you travel across the world with your hunters in tow, and inevitably they catch up to you.  Late one night, some unexpected visitors appear on the doorstep of the hovel you're spending the night in.  Brunhilde the beautiful receptionist leads them, though she looks a bit less appealing in a hooded black robe spattered with blood.  Before you can fight or fly, they are upon you with ropes and chains.  They blindfold you and drag you over rough pavement for some time.^";
                              
                                 print "^When your blindfold is finally removed, you behold the last sight you'll ever see: an array of leering hook-tentacled statues ringed around an altar over which you are stretched, and Brunhilde holding a curved dagger over your heart.  She wears nothing but a giddy grin, and your last thought is that even through a filter of murderous madness she is still so beautiful.  As your blood drains away into massive necrotic batteries, so too does your memory disappear into obscurity.^";
                                 deadflag = 1;
                                 rtrue;
                              }
                           }
                           
                        } else {
                           ! handle cases where player is consumed with and without nomicron
                           ! the lost use your blood plus the fact that you lowered their prison walls to escape 
                           print "^The Forgotten Gods pounce upon you, tearing you apart at the molecular level.  They leave your senses intact as long as possible in order to maximize your suffering, which seems to be a delicacy to them.  Since you have so helpfully lowered all the defenses against them and provided them with a battery of life force and pain on which to draw, they are easily able to free themselves to assert their terrible will upon the world.^";
                           if(OmniNomicron in player) {
                              ! the Lost now have the power of the nomicron
                              print "^Howling giddy laughter from a thousand thousand mirthless voices is the last thing you'll ever hear as the tide of darkness and hatred washes over you, into you, and discovers the mighty OmniNomicron in your pack.  Perhaps they could have taken it without your help, but perhaps it wards of its own that you were not aware of.  Ah well, it's no matter to you anymore, for in the next few moments you are reduced to literally no matter.^";
                           } 
                           deadflag = 1;
                           rtrue;
                        }
                     }
                  ],
           scored_value 100,
           chances_to_act 0,
           is_wand_used false,
           s_to MawOfInfinity,
      has scored light;
    
    Object -> TheLost "Amalgam of Forgotten Gods"
      with name 'glowing' 'mass' 'amalgam' 'of' 'forgotten' 'gods' 'lost' 'evil' 'abyss' 'darkness' 'edge' 'of' 'all' 'and' 'nothing' 'patient' 'predator', 
      has static;
